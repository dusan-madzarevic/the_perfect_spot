package sbnz.integracija;

import com.ftn.uns.ac.rs.theperfectmeal.dto.RestaurantRequirements;
import com.ftn.uns.ac.rs.theperfectmeal.model.Restaurant;
import com.ftn.uns.ac.rs.theperfectmeal.model.MusicGenre;
import com.ftn.uns.ac.rs.theperfectmeal.model.RestaurantGrade;
import com.ftn.uns.ac.rs.theperfectmeal.model.Distance;
import java.time.LocalDate;
import java.lang.Math;


declare RestaurantCompatibility
	restId: long
end

declare CousineScore
	cousineScore: double
	restId: long
end

declare PetFriendlyScore
	petScore: double
	restId: long
end


declare PricesScore
	pricesScore: double
	restId: long
end

declare DisabledScore
	disabledScore: double
	restId: long
end

declare AlcoholScore
	alcScore: double
	restId: long
end

declare LiveMusicScore
	liveMusicScore: double
	restId: long
end

declare MusicGenreScore
	genreScore: double
	restId: long
end

declare BusinessHallScore
	hallScore: double
	restId: long
end

declare WifiScore
	wifiScore: double
	restId: long
end

declare ParkingScore
	parkingScore: double
	restId: long
end

declare SmokingScore
	smokingScore: double
	restId: long
end

declare PlaygroundScore
	playgroundScore: double
	restId: long
end

declare GardenScore
	gardenScore: double
	restId: long
end

declare GradeScore
	gradeScore: double
	restId: long
end

declare MonthlyBonusScore
	bonusScore: double
	restId: long
end

declare MonthlyPenalScore
	penalScore: double
	restId: long
end

declare CalculatedDistance
	distance: double
	restId: long
end

declare DistanceScore
	score: double
	restId: long
end


rule "Inserting restaurants"
	agenda-group "restaurant"
	salience 3
	when
		$res: Restaurant($id: id)
	then
		insert(new RestaurantCompatibility($id));
end;

rule "Restaurant cuisine type"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($c: cuisine)
	    $re: Restaurant($id: id, $c == cuisine)
        $com: RestaurantCompatibility(restId == $id) 
        not ( CousineScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" cuisine is correct type");
    	insert (new CousineScore(2,$id) );
end

rule "Restaurant cousine type not correct"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($c: cuisine)
	    $re: Restaurant($id: id, $c != cuisine)
        $com: RestaurantCompatibility(restId == $id) 
        not ( CousineScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" cousine is NOT correct type");
    	insert (new CousineScore(0,$id) );
end


rule "Pet friendly"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($pet: petFriendly, $pet == true)
	    $re: Restaurant($id: id, petFriendly == $pet )
        $com: RestaurantCompatibility(restId == $id) 
        not ( PetFriendlyScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" is pet friendly.");
    	insert (new PetFriendlyScore(2,$id));
end

rule "Not Pet friendly"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($pet: petFriendly, $pet == true)
	    $re: Restaurant($id: id, petFriendly == false )
        $com: RestaurantCompatibility(restId == $id) 
        not ( PetFriendlyScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" is not  pet friendly.");
    	insert (new PetFriendlyScore(2,$id));
end
rule "Set pet friendly score to 0"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($pet: petFriendly, $pet == false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( PetFriendlyScore( restId == $id) )              
    then
    	insert (new PetFriendlyScore(0,$id));
end

rule "Prices"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($p:prices)
	    $re: Restaurant($id: id, prices == $p )
        $com: RestaurantCompatibility(restId == $id) 
        not ( PricesScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" prices is correct type");
    	insert (new PricesScore(2,$id));
end

rule "Prices not right type"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($p:prices)
	    $re: Restaurant($id: id, prices != $p )
        $com: RestaurantCompatibility(restId == $id) 
        not ( PricesScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" prices is NOT correct type");
    	insert (new PricesScore(0,$id));
end

rule "Access for disabled"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($disabled: accessForDisabled, $disabled == true)
	    $re: Restaurant($id: id, accessForDisabled == $disabled )
        $com: RestaurantCompatibility(restId == $id) 
        not ( DisabledScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has access for disabled.");
    	insert (new DisabledScore(2,$id));
end

rule "No Access for disabled"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($disabled: accessForDisabled, $disabled == true)
	    $re: Restaurant($id: id, accessForDisabled == false )
        $com: RestaurantCompatibility(restId == $id) 
        not ( DisabledScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has access for disabled.");
    	insert (new DisabledScore(2,$id));
end

rule "Set access for disabled score to 0"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($disabled: accessForDisabled, $disabled == false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( DisabledScore( restId == $id) )              
    then  
    	insert (new DisabledScore(0,$id));
end

rule "Serving alcohol"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($alc: servingAlcohol, $alc == true)
	    $re: Restaurant($id: id, servingAlcohol == $alc)
        $com: RestaurantCompatibility(restId == $id) 
        not ( AlcoholScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" is serving alcohol.");
    	insert (new AlcoholScore(2,$id));
end

rule "Set serving alcohol score to 0"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($alc: servingAlcohol, $alc == false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( AlcoholScore( restId == $id) )              
    then
    	insert (new AlcoholScore(2,$id));
end

rule "Live music"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($live: liveMusic, $live == true)
	    $re: Restaurant($id: id, liveMusic == $live  )
        $com: RestaurantCompatibility(restId == $id) 
        not ( LiveMusicScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has live music.");
    	insert (new LiveMusicScore(2,$id));
end

rule "Set live music score to 0"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($live: liveMusic, $live == false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( LiveMusicScore( restId == $id) )              
    then
    	insert (new LiveMusicScore(0,$id));
end

rule "Music genre"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements( $genre: musicGenre)
	    $re: Restaurant($id: id,  musicGenre == $genre  )
        $com: RestaurantCompatibility(restId == $id) 
        not ( MusicGenreScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has right music genre.");
    	insert (new MusicGenreScore(1,$id));
end

rule "Music genre set to 0"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements( $genre: musicGenre, $genre != MusicGenre.NONE)
	    $re: Restaurant($id: id,  musicGenre != $genre  )
        $com: RestaurantCompatibility(restId == $id) 
        not ( MusicGenreScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has NOT right music genre.");
    	insert (new MusicGenreScore(0,$id));
end


rule "Music genre-None"
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements( musicGenre == MusicGenre.NONE)
	    $re: Restaurant($id: id )
        $com: RestaurantCompatibility(restId == $id) 
        not ( MusicGenreScore( restId == $id) )              
    then
        System.out.println("Restaurant "+$re.getName()+" NONE genre.");
    	insert (new MusicGenreScore(0,$id));
end

rule "Bussines hall "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($hall: hasBusinessHall, $hall == true)
	    $re: Restaurant($id: id, hasBusinessHall == $hall )
        $com: RestaurantCompatibility(restId == $id) 
        not ( BusinessHallScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has business hall.");
    	insert (new BusinessHallScore(2,$id));
end

rule "Set bussines hall score to 0 "
	agenda-group "restaurant"
	salience 2
    when
         $req: RestaurantRequirements($hall: hasBusinessHall, $hall == false)
	    $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( BusinessHallScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+"  business hall 0.");
    	insert (new BusinessHallScore(0,$id));
end

rule "No business hall"
	agenda-group "restaurant"
	salience 2
    when
         $req: RestaurantRequirements($hall: hasBusinessHall, $hall == true)
	    $re: Restaurant($id: id, hasBusinessHall == false)
        $com: RestaurantCompatibility(restId == $id) 
        not ( BusinessHallScore( restId == $id) )              
    then
    	insert (new BusinessHallScore(-1,$id));
end

rule "Wifi "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($wifi: hasWifi, $wifi==true)
	    $re: Restaurant($id: id, hasWifi==$wifi )
        $com: RestaurantCompatibility(restId == $id) 
        not ( WifiScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has wifi.");
    	insert (new WifiScore(1,$id));
end

rule "Set wifi score to 0 "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($wifi: hasWifi, $wifi==false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( WifiScore( restId == $id) )              
    then
    	insert (new WifiScore(0,$id));
end

rule "Parking "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($park: hasCarPark, $park==true)
	    $re: Restaurant($id: id, hasCarPark==$park   )
        $com: RestaurantCompatibility(restId == $id) 
        not ( ParkingScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has parking.");
    	insert (new ParkingScore(1,$id));
end

rule "No Parking "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($park: hasCarPark, $park==true)
	    $re: Restaurant($id: id, hasCarPark==false   )
        $com: RestaurantCompatibility(restId == $id) 
        not ( ParkingScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has NOT parking.");
    	insert (new ParkingScore(1,$id));
end

rule "Set parking score to 0 "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($park: hasCarPark, $park==false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( ParkingScore( restId == $id) )              
    then
    	insert (new ParkingScore(0,$id));
end

rule "Smoking "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($sm: hasSmokingPart, $sm==true)
	    $re: Restaurant($id: id, hasSmokingPart==true  )
        $com: RestaurantCompatibility(restId == $id) 
        not ( SmokingScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has smoking part.");
    	insert (new SmokingScore(1,$id));
end

rule "No smoking "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($sm: hasSmokingPart, $sm== true)
        $re: Restaurant($id: id, hasSmokingPart == false)
        $com: RestaurantCompatibility(restId == $id) 
        not ( SmokingScore( restId == $id) )              
    then
        System.out.println("Restaurant "+$re.getName()+" smoking 0.");
    	insert (new SmokingScore(0,$id));
end

rule "Set smoking score to 0 "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($sm: hasSmokingPart, $sm== false)
        $re: Restaurant($id: id)
        $com: RestaurantCompatibility(restId == $id) 
        not ( SmokingScore( restId == $id) )              
    then
        System.out.println("Restaurant "+$re.getName()+" smoking 0.");
    	insert (new SmokingScore(0,$id));
end

rule "Playground "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($play: hasPlayground, $play==true)
	    $re: Restaurant($id: id, hasPlayground==$play   )
        $com: RestaurantCompatibility(restId == $id) 
        not ( PlaygroundScore( restId == $id) )              
    then
    	System.out.println("Restaurant "+$re.getName()+" has playground.");
    	insert (new PlaygroundScore(1, $id));
end

rule "Set playground score to 0 "
	agenda-group "restaurant"
	salience 2
    when
        $req: RestaurantRequirements($play: hasPlayground, $play == false)
		$re: Restaurant($id: id)       
        $com: RestaurantCompatibility(restId == $id) 
        not ( PlaygroundScore( restId == $id) )              
    then
    	insert (new PlaygroundScore(0, $id));
end

rule "Stimulate restaurants with better grade"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, $grades: grades) 
		$grade: Double() from accumulate (
			RestaurantGrade(
				$val: value
			) from $grades,
			average($val)
		)     
        $com: RestaurantCompatibility(restId == $id) 
        not ( GradeScore( restId == $id) )          
	then
		System.out.println("Restaurant "+$re.getName()+" got grade score. Score: " + $grade);
		insert (new GradeScore( $grade , $id));
end;
rule "Restaurants with no grades"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, grades.isEmpty()) 
        $com: RestaurantCompatibility(restId == $id) 
        not ( GradeScore( restId == $id) )          
	then
		System.out.println("Restaurant "+$re.getName()+" is not graded yet.");
		insert (new GradeScore( 0 , $id));
end;

rule "Stimulate restaurants with better grade this month"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, $grades: grades) 
		$grade: Double($grade >= 4.5) from accumulate (
			RestaurantGrade(
				$val : value,
				date.after(java.sql.Date.valueOf(LocalDate.now().minusMonths(1))) == true
			) from $grades,
			average($val)
		)     
        $com: RestaurantCompatibility(restId == $id) 
        not ( MonthlyBonusScore( restId == $id) )          
	then
		System.out.println("Restaurant "+$re.getName()+" got bonus score for last month. Score: 3 " + $grade);
		insert (new MonthlyBonusScore( 3 , $id));
		insert (new  MonthlyPenalScore( 0 , $id));

end;

rule "Destimulate restaurants that have bad grades this month"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, $grades: grades) 
		$grade: Double($grade <= 2.5) from accumulate (
			RestaurantGrade(
				$val : value,
				date.after(java.sql.Date.valueOf(LocalDate.now().minusMonths(1))) == true
			) from $grades,
			average($val)
			
		)     
        $com: RestaurantCompatibility(restId == $id) 
        not ( MonthlyPenalScore( restId == $id) )          
	then
		System.out.println("Restaurant "+$re.getName()+" got penal score for last month. Score: -3");
		insert (new  MonthlyPenalScore( -3 , $id));
		insert (new MonthlyBonusScore( 0 , $id));
end;

rule "No bonus-no penal for last month"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, $grades: grades) 
		$grade: Double( $grade >  2.5 && $grade < 4.5)
		 from accumulate (
			RestaurantGrade(
				$val : value,
				date.after(java.sql.Date.valueOf(LocalDate.now().minusMonths(1))) == true
			) from $grades,
			average($val))
		
        $com: RestaurantCompatibility(restId == $id) 
        not ( MonthlyPenalScore( restId == $id) )          
	then
	    System.out.println("Restaurant "+$re.getName()+" got penal score 0-NO BONUS NO PENAL");
		insert (new  MonthlyPenalScore( 0 , $id));
		insert (new MonthlyBonusScore( 0 , $id));
end;

rule "No bonus-no penal for last month-not graded last month"
	agenda-group "restaurant"
	salience 2
	when
		$re: Restaurant($id: id, $grades: grades) 
		Number( intValue == 0)
		 from accumulate (
			RestaurantGrade(
				$val : value,
				date.after(java.sql.Date.valueOf(LocalDate.now().minusMonths(1))) == true
			) from $grades,
			count($val))
		
        $com: RestaurantCompatibility(restId == $id) 
        not ( MonthlyPenalScore( restId == $id) )          
	then
	    System.out.println("Restaurant "+$re.getName()+" got penal score 0-Not graded last month");
		insert (new  MonthlyPenalScore( 0 , $id));
		insert (new MonthlyBonusScore( 0 , $id));
end;


rule "Calculation distance"
agenda-group "restaurant"
salience 5
when	
	$req: RestaurantRequirements($lon2: lon, $lat2: lat, $lat2 != 0.0 && $lon2 != 0.0)
	$rest: Restaurant($id: id, $lon1: lon, $lat1: lat)
	$com: RestaurantCompatibility(restId == $id) 
then	
	System.out.println("Distance from restaurant "+$rest.getName()+" is "+ $rest.getDistance($lat2,$lon2) +" km.");
	insert (new CalculatedDistance($rest.getDistance($lat2,$lon2), $id));
end;

rule "Distance is not important"
agenda-group "restaurant"
salience 5
when	
	$req: RestaurantRequirements($lon2: lon, $lat2: lat, $lat2 == 0 && $lon2 == 0)
	$rest: Restaurant($id: id, $lon1: lon, $lat1: lat)
	$com: RestaurantCompatibility(restId == $id) 
then	
	insert (new CalculatedDistance(-1, $id));
end;

rule "Scoring distance-FAR-on foot"
agenda-group "restaurant"
salience 2
when	
	CalculatedDistance(distance > 1.5, $idRes: restId)
	$req: RestaurantRequirements(goingByCar == false)
	$rest: Restaurant($id: id, $id == $idRes)
	$com: RestaurantCompatibility(restId == $id)
	 not ( DistanceScore( restId == $id) )  
then	
	System.out.println("Distance from restaurant "+$rest.getName()+" is FAR.");
	insert (new DistanceScore(-5, $id));
end;

rule "Scoring distance-NEAR-on foot"
agenda-group "restaurant"
salience 2
when	
	CalculatedDistance(distance < 1.5 && distance > 0, $idRes: restId)
	$req: RestaurantRequirements(goingByCar == false)
	$rest: Restaurant($id: id, $id == $idRes)
	$com: RestaurantCompatibility(restId == $id)
	 not ( DistanceScore( restId == $id) )  
then	
	System.out.println("Distance from restaurant "+$rest.getName()+" is NEAR.");
	insert (new DistanceScore(5, $id));
end;

rule "Scoring distance-FAR-by car"
agenda-group "restaurant"
salience 2
when	
	CalculatedDistance(distance > 50.5, $idRes: restId)
	$req: RestaurantRequirements(goingByCar == true)
	$rest: Restaurant($id: id, $id == $idRes)
	$com: RestaurantCompatibility(restId == $id)
	 not ( DistanceScore( restId == $id) )  
then	
	System.out.println("Distance from restaurant "+$rest.getName()+" is FAR.");
	insert (new DistanceScore(-5, $id));
end;

rule "Scoring distance-NEAR-by car"
agenda-group "restaurant"
salience 2
when	
	CalculatedDistance(distance < 50.5 && distance > 0, $idRes: restId)
	$req: RestaurantRequirements(goingByCar == true)
	$rest: Restaurant($id: id, $id == $idRes)
	$com: RestaurantCompatibility(restId == $id)
	 not ( DistanceScore( restId == $id) )  
then	
	System.out.println("Distance from restaurant "+$rest.getName()+" is NEAR.");
	insert (new DistanceScore(5, $id));
end;

rule "Distance is not important score"
agenda-group "restaurant"
salience 2
when	
	CalculatedDistance(distance == -1, $idRes: restId)
	$rest: Restaurant($id: id, $id == $idRes)
	$com: RestaurantCompatibility(restId == $id)
	 not ( DistanceScore( restId == $id) )  
then	
	insert (new DistanceScore(0, $id));
end;