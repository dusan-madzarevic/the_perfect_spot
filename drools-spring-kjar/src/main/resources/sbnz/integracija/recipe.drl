package sbnz.integracija;

import com.ftn.uns.ac.rs.theperfectmeal.dto.RecipeRequirements;
import com.ftn.uns.ac.rs.theperfectmeal.model.Recipe;
import com.ftn.uns.ac.rs.theperfectmeal.model.RecipeIngredient;
import com.ftn.uns.ac.rs.theperfectmeal.dto.IngredientAmount;
import com.ftn.uns.ac.rs.theperfectmeal.util.CaloricType;

import java.util.List;
import java.lang.Math;

declare RecipeCompatibility
	@PropertyReactive
	recipeId: long
	typeScore: double
	difficultyScore: double
	servingScore: double
	calorieScore: double
	ingredientScore: double
	timeScore: double
	alergyScore: double
	gradeScore: double
	bonusGradeScore: double
end

rule "Compatibility - creating recipe requirement object"
	agenda-group "recipe"
	salience 3
	when
		$req: RecipeRequirements()
		$re: Recipe($id: recipeId)
	then
		System.out.println("Scoring recipe with id: " + $id);
		insert(new RecipeCompatibility($id, -1, 0, -1, 0, 0, 0, 0, 0, 0));
end;

rule "Recipe type"
	agenda-group "recipe"
	salience 1
    when
        $req: RecipeRequirements($t: type)
        $re: Recipe($id: recipeId, $t == type)
        $com: RecipeCompatibility(recipeId == $id) @Watch(!typeScore)               
    then
    	System.out.println("RECIPE TYPE RULE FIRED: Recipe "+$re.getRecipeName()+" is correct type");
    	modify($com){setTypeScore(1);};
end

rule "Recipe servings"
	agenda-group "recipe"
	salience 1
    when
        $req: RecipeRequirements($s: servings)
        $re: Recipe($id: recipeId, $ser: servings, $ser >= $s)
        $com: RecipeCompatibility(recipeId == $id) @Watch(!servingScore)               
    then
    	System.out.println("RECPIE SERVINGS RULE FIRED: Recipe "+$re.getRecipeName()+" has enough servings");
    	modify($com){setServingScore(-1*(Math.abs($ser - $s)));};
end

rule "Recipe ingredients"
	agenda-group "recipe"
	salience 1
    when
        RecipeRequirements($ingr: ingredients)
        $ingIds: List(!this.isEmpty()) from accumulate (IngredientAmount($ingId: ingredientId) from $ingr, collectList($ingId))
        $re: Recipe($id: recipeId, $recIng: ingredients)
        $recIngIds: List(!this.isEmpty()) from accumulate (RecipeIngredient($recIngId: ingredient.ingredientId) from $recIng, collectList($recIngId))
        eval($recIngIds.containsAll($ingIds))
        $com: RecipeCompatibility(recipeId == $id) @Watch(!ingredientScore)               
    then
    	System.out.println("RECIPE INGREDIENTS RULE FIRED: Recipe "+$re.getRecipeName()+" contains all the ingredients");
    	modify($com){setIngredientScore($ingIds.size() - $recIngIds.size() );};
end


rule "Recipe preparation time"
	agenda-group "recipe"
	salience 1
    when
        $req: RecipeRequirements($t: limitedTime, $t == true, $at: availableTime)
        $re: Recipe($id: recipeId, $at >= prepDuration, $pd: prepDuration)
        $com: RecipeCompatibility(recipeId == $id) @Watch(!timeScore)               
    then
    	System.out.println("RECIPE PREPARATION TIME RULE FIRED: You have enough time to cook recipe '"+$re.getRecipeName()+"'.");
    	modify($com){setTimeScore(2);};
end

rule "Recipe alergies"
	agenda-group "recipe"
	salience 1
    when
        RecipeRequirements($ale: alergies)
        $re: Recipe($id: recipeId, $recIng: ingredients)
		Number(intValue > 0) from accumulate(
        	RecipeIngredient($t:this, $recIngId: ingredient.getIngredientId(), $recIngId memberOf $ale) from $recIng,
        	count($t)
        )
        $com: RecipeCompatibility(recipeId == $id) @Watch(!alergyScore)               
    then
    	System.out.println("RECIPE ALLERGIES RULE FIRED: Recipe '"+$re.getRecipeName()+"' contains ingridients you are allergic to.");
    	modify($com){setAlergyScore(-1);};
end

rule "Recipe calories - high"
	agenda-group "recipe"
	salience 1
	when
		$req: RecipeRequirements(lowCalorie == true)
		$re: Recipe($id: recipeId)
		$reCalc: RecipeCalcInfo($idCalc: recipeId, $idCalc == $id, caloricType == CaloricType.HIGH_CAL)
		$com: RecipeCompatibility(recipeId == $id) @Watch(!calorieScore) 
		
	then
		System.out.println("RECIPE CALORIES RULE FIRED: Recipe '"+$re.getRecipeName()+"' deprioritized due to high caloric count.");
    	modify($com){setCalorieScore(-1);};
end

rule "Recipe calories - low"
	agenda-group "recipe"
	salience 1
	when
		$req: RecipeRequirements(lowCalorie == true)
		$re: Recipe($id: recipeId)
		$reCalc: RecipeCalcInfo($idCalc: recipeId, $idCalc == $id, caloricType == CaloricType.LOW_CAL)
		$com: RecipeCompatibility(recipeId == $id) @Watch(!calorieScore) 
		
	then
		System.out.println("RECIPE CALORIES RULE FIRED: Recipe '"+$re.getRecipeName()+"' prioritized due to low caloric count.");
    	modify($com){setCalorieScore(1);};
end

rule "Recipe difficulty - matches"
	agenda-group "recipe"
	salience 1
	when
		$req: RecipeRequirements($skill: skill)
		$re: Recipe($id: recipeId)
		$reCalc: RecipeCalcInfo($idCalc: recipeId, $idCalc == $id, recipeDifficulty == $skill)
		$com: RecipeCompatibility(recipeId == $id) @Watch(!difficultyScore) 
		
	then
		System.out.println("RECIPE DIFFICULTY RULE FIRED: Recipe '"+$re.getRecipeName()+"' matches desired difficulty.");
    	modify($com){setDifficultyScore(1);};
end

rule "Recipe grades"
	agenda-group "recipe"
	salience 1
	when
		$re: Recipe($id: recipeId, $grades: recipeGrades)
		$grade: Double() from accumulate (
			RecipeGrade(
				$val: value
			) from $grades,
			average($val)
		)
		$com: RecipeCompatibility(recipeId == $id) @Watch(!gradeScore) 
	then
		System.out.println("RECIPE GRADE RULE FIRED: Recipe '"+$re.getRecipeName()+"' total average grade is: "+$grade+" .");
		modify($com){setGradeScore($grade);};
end

rule "Recipe bonus grades - popular"
	agenda-group "recipe"
	salience 1
	when
		$re: Recipe($id: recipeId, $grades: recipeGrades)
		$grade: Double($grade >= 4.5) from accumulate (
			RecipeGrade(
				$val : value,
				date.isAfter(LocalDate.now().minusMonths(1)) == true
			) from $grades,
			average($val)
			
		)     
		$com: RecipeCompatibility(recipeId == $id) @Watch(!bonusGradeScore) 
	then
		System.out.println("RECIPE BONUS GRADE RULE FIRED: Recipe '"+$re.getRecipeName()+"' had an average grade higher than 4.5 in the previous month.");
		modify($com){setBonusGradeScore(1);};

end

rule "Recipe bonus grades - unpopular"
	agenda-group "recipe"
	salience 1
	when
		$re: Recipe($id: recipeId, $grades: recipeGrades)
		$grade: Double($grade <= 2.5) from accumulate (
			RecipeGrade(
				$val : value,
				date.isAfter(LocalDate.now().minusMonths(1)) == true
			) from $grades,
			average($val)	
		)   
		$com: RecipeCompatibility(recipeId == $id) @Watch(!bonusGradeScore)   
	then
		System.out.println("RECIPE BONUS GRADE RULE FIRED: Recipe '"+$re.getRecipeName()+"' had an average grade lower than 2.5 in the previous month.");
		modify($com){setBonusGradeScore(-1);};
	
	
end